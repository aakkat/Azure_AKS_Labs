name: Create Azure AKS With Terraform
on:
  push:
    branches:
       - main

permissions:
      id-token: write
      contents: read
      packages: read
      pull-requests: read
jobs: 
  AKS-Cluster-Deployment:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: AKS
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
        
      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          audience: api://AzureADTokenExchange
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: latest
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN_ID }}

#      - name: Terraform Init
#        id: init
#        env:
#          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#          ARM_USE_OIDC: true
#        run: terraform init
#      
#      - name: Terraform Validate
#        id: validate
#        env:
#          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#          ARM_USE_OIDC: true
#        run: terraform validate
#
#      - name: Terraform Plan
#        id: plan
#        env:
#          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#          ARM_USE_OIDC: true
#        run: terraform plan
#        continue-on-error: true
#
#      - name: Terraform Plan Status
#        if: steps.plan.outcome == 'failure'
#        run: exit 1
#
#      - name: Terraform Apply
#        run: terraform apply -auto-approve
#
#      - name: Terraform Output
#        run: terraform output

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Azure CLI Login for AKS
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          echo "Getting cluster info from terraform output..."
          CLUSTER_NAME=$(terraform output kubernetes_cluster_name | tr -d '"')
          RG_NAME=$(terraform output resource_group_name | tr -d '"')
          
          echo "Cluster Name: $CLUSTER_NAME"
          echo "Resource Group: $RG_NAME"
          
          echo "Getting AKS credentials..."
          az aks get-credentials \
            --name "$CLUSTER_NAME" \
            --resource-group "$RG_NAME" \
            --overwrite-existing \
            --admin

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          kubectl config view
          kubectl config get-contexts
          kubectl config current-context
          
      - name: Deploy to AKS
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing AKSApp directory:"
          ls -la ./AKS/AKSApp/
          
          echo "Applying Kubernetes manifests..."
          kubectl apply -f ./AKS/AKSApp/sampleapp.yaml
          
          echo "Verifying deployment..."
          kubectl get nodes
          kubectl get pods --all-namespaces
          kubectl get deployments --all-namespaces
          
          echo "Waiting for service to be ready..."
          sleep 40
          kubectl get service nginx-service -o wide
          
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up resources..."
          rm -rf $HOME/.kube
          az logout
          mkdir -p $HOME/.kube
          echo "Verifying kubectl config..."
          kubectl config view
