name: Create Azure AKS With Terraform
on:
  push:
    branches:
       - main

permissions:
      id-token: write
      issues: write
      contents: read
      packages: read
      pull-requests: write
jobs: 
  AKS-Cluster-Deployment:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: AKS
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
        
      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: latest
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN_ID }}

      - name: Terraform Init
        id: init
        env:
          ARM_USE_OIDC: true
          ARM_USE_CLI: true
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        env:
          ARM_USE_OIDC: true
          ARM_USE_CLI: true
        run: terraform validate

      - name: Terraform Plan
        id: plan
        env:
          ARM_USE_OIDC: true
          ARM_USE_CLI: true
        run: terraform plan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Terraform Output
        run: terraform output

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Get AKS Credentials
        run: |
          # Get cluster info from terraform output
          CLUSTER_NAME=$(terraform output -raw kubernetes_cluster_name || echo "cluster-bursting-jennet")
          RG_NAME=$(terraform output -raw resource_group_name || echo "rg-refined-swine")
          
          echo "Getting AKS credentials for cluster $CLUSTER_NAME in resource group $RG_NAME"
          az aks get-credentials -n "$CLUSTER_NAME" -g "$RG_NAME" --admin
          kubectl apply -f ./AKSApp/sampleapp.yaml
          sleep 40
          kubectl get service nginx-service
          rm -rf ~/.kube
